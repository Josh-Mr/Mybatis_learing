<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--
       MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：
        configuration（配置）
            properties（属性）
            settings（设置）
            typeAliases（类型别名）
            typeHandlers（类型处理器）
            objectFactory（对象工厂）
            plugins（插件）
            environments（环境配置）
            environment（环境变量）
            transactionManager（事务管理器）
            dataSource（数据源）
            databaseIdProvider（数据库厂商标识）
            mappers（映射器）-->
<!-- mybatis主配置文件-->
<configuration>
    <!--配置引入数据库连接配置-->
    <properties resource="jdbc.properties">
        <!--<property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
        <property name="driver" value="com.mysql.jdbc.Driver"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>-->
    </properties>

    <!--设置延迟加载等信息-->
    <settings>
        <!--开始日志输出控制台-->
        <setting name="logImpl" value="STDOUT_LOGGING" />
        <!--全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。
        true | false	true-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。
        特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。
        true | false	false-->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!--是否允许单个语句返回多结果集（需要数据库驱动支持）。
        true | false	true-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--是否允许单个语句返回多结果集（需要数据库驱动支持）。
        true | false	true-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要数据库驱动支持。
        如果设置为 true，将强制使用自动生成主键。
        尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。
        true | false	False-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。
        NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。
        FULL 会自动映射任何复杂的结果集（无论是否嵌套）。
        NONE, PARTIAL, FULL	PARTIAL-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或未知属性类型）的行为。
        NONE: 不做任何反应
        WARNING: 输出警告日志（'org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN）
        FAILING: 映射失败 (抛出 SqlSessionException)
        NONE, WARNING, FAILING	NONE-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <setting name="defaultStatementTimeout" value="25"/>
        <setting name="defaultFetchSize" value="100"/>
        <setting name="safeRowBoundsEnabled" value="false"/>
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <setting name="localCacheScope" value="SESSION"/>
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    </settings>

    <!--类型别名可为 Java 类型设置一个缩写名字。
        它仅用于 XML 配置，意在降低冗余的全限定类名书写。 -->
    <!-- 运用package 时，可以用注解@Alias(value = "josh")对每个实体定义别名 -->
    <typeAliases>
<!--        <typeAlias type="com.josh.entity.User" alias="user"></typeAlias>-->
        <package name="com.josh.entity"/>
    </typeAliases>

    <!-- MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 
    都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。-->
    <typeHandlers>
        <!--没引用-->
        <typeHandler handler="com.josh.typehandler.ExampleTypeHandler"></typeHandler>
    </typeHandlers>

    <!--对象工厂（objectFactory）每次 MyBatis 创建结果对象的新实例时，
    它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。
    默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，
    要么通过存在的参数映射来调用带有参数的构造方法。
    如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。-->
    <!--<objectFactory type="org.mybatis.example.ExampleObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>-->

    <!--插件（plugins）
    MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。
    默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：
    Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)
    ParameterHandler (getParameterObject, setParameters)
    ResultSetHandler (handleResultSets, handleOutputParameters)
    StatementHandler (prepare, parameterize, batch, update, query)-->


    <!-- 配置环境-->
    <!--MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，
    现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；
    或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。

    不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。
    所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，
    每个数据库对应一个。而如果是三个数据库，就需要三个实例，
    依此类推，记起来很简单 ：每个数据库对应一个 SqlSessionFactory 实例-->
    <environments default="mysql">
        <environment id="mysql">
            <!--配置事务类型-->
            <transactionManager type="JDBC"></transactionManager>
            <!--连接数据库信息-->
            <dataSource type="POOLED">
                <property name="url" value="${url}"/>
                <property name="driver" value="${driver}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--配置映射文件的位置-->
    <!--映射器（mappers）
    既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。
    但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。
    在自动查找资源方面，Java 并没有提供一个很好的解决方案，
    所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。
    你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），
    或类名和包名等。-->

    <mappers>
    <!--
        使用相对于类路径的资源引用 - xml的方式
         <mapper resource = "com/josh/dao/IUserDao.xml"></mapper>-->
        <!--使用完全限定资源定位符（URL）
            <mapper url="file:///var/mappers/AuthorMapper.xml"/>
           -->
        <!-- 使用映射器接口实现类的完全限定类名 -注解的方式
        <mapper class = "com.josh.dao.IUserDao"></mapper>  -->
        <!--将包内的映射器接口实现全部注册为映射器 -->
       <package name="com.josh.dao"/>
    </mappers>
</configuration>
